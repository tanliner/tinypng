#!/bin/bash

##
# Author: Alex Kulikov <alex.kulikov@xing.com>
# Version: 0.3
# Description: Automated mass optimization script for web images.
#
# Credits:
# - pngcrush by Glenn Randers-Pehrson (http://pmt.sourceforge.net/pngcrush)
# - OptiPNG by Cosmin Truta (http://optipng.sourceforge.net)
# - pngout by Ken Silverman (http://advsys.net/ken/utils.htm)
# - advpng by Andrea Mazzoleni (http://advancemame.sourceforge.net/comp-readme.html)
# - Imagemagick by ImageMagick Studio LLC (http://www.imagemagick.org/script/index.php)
##

# Global Vars
TARGET=${1%/}
TOTALFILES=0
LOGFILE="/tmp/tinypng.log"
ERRORLOG="/tmp/tinypng_error.log"
DATE=`date "+%y%m%d_%H%M%S"`
BACKUP="/tmp/tinypng_"$DATE
#BACKUP="/tmp/tinypng_bak"
PWD=`pwd`
path=$PWD/$TARGET

# Colors
ESC_SEQ="\x1b["
COL_RESET=$ESC_SEQ"39;49;00m"
COL_RED=$ESC_SEQ"31;01m"
COL_GREEN=$ESC_SEQ"32;01m"
COL_CYAN=$ESC_SEQ"36;01m"

DEBUG=$TINY_DEBUG
TINYPNG_WORK_DIR='/tmp/tinypng'

#Copy original files
function copy() {
  echo "tinypng: Make backup copy"
  #mkdir $BACKUP
  cp -r $path $BACKUP
}

#Compress orgininal copy
function backup() {
  echo "tinypng: Compress backup"
  #tar czf /tmp/tinypng_$DATE.tar.gz /tmp/tinypng_$DATE  2> /dev/null
  #rm -r /tmp/tinypng_$DATE/
}

#Count PNGs in targeted folder
function count() {
  echo "tinypng: Count files"
  for x in $(find $TARGET -type f -name '*.png' ! -name '._*' ); do
  TOTALFILES=$(($TOTALFILES+1))
  done
}

#find all PNGs in folder and crush there
function crushdir() {
  echo "tinypng: Crush directory"
  #Counter Vars
  totalstart=0
  totalend=0
  position=0
  #Seperator in Logfile
  echo "====================" $DATE "====================" >> $LOGFILE

  for x in $(find $TARGET -type f -name '*.png' ! -name '._*' ); do
    position=$(($position+1))
    percentdone=$(($position*100/$TOTALFILES))
    echo -ne "["$position/$TOTALFILES"] ("$percentdone "%) >> "$x
    count=0
    let start=`ls -l $x | tr -s " " | cut -d " " -f 5`
    totalstart=$(($totalstart+$start))

    crunshPNG $x

    let end=`ls -l $x | tr -s " " | cut -d " " -f 5`
    totalend=$(($totalend+$end))
    sum=$(($start-$end))
    percent=$(($sum*100/$start))
    wrongsize=$(($sum<0))
    if [[ $wrongsize -eq 1 ]] ; then
         echo -e $COL_RED"ERROR: "$x" seems to be broken"$COL_RESET
         echo "ERROR: "$x" seems to be broken" >> $ERRORLOG
         cp $BACKUP/$x $path/
         echo ">> "$x" Restored from Backup."
    else
         echo $x "Saved:" $sum "Bytes ("$percent "%)" >> $LOGFILE
         echo "  >> Saved:" $sum "Bytes ("$percent "%)"
    fi
  done
    totalsum=$(($totalstart-$totalend))
    totalpercent=$(($totalsum*100/$totalstart))
    echo "Total Saved:" $(($totalsum/1024)) "KByte ("$totalsum "Byte) ("$totalpercent"%)" >> $LOGFILE
    echo -ne '\n'
    echo -e $COL_CYAN"Total Saved:" $(($totalsum/1024)) "KByte ("$totalsum "Byte) ("$totalpercent"%)"$COL_RESET
    echo "Backup: /tmp/"$DATE".tar.gz" >> $LOGFILE
}

function crushfile() {
  if $DEBUG ;then
    echo "tinypng: Crush file"
    ## the command `ls` maybe on the wrong wordir... Be carefull
    let start=`ls -l $TARGET | tr -s " " | cut -d " " -f 5`
  fi
  crunshPNG $TARGET
  if $DEBUG ;then
    ## the command `ls` maybe on the wrong wordir... Be carefull
    let end=`ls -l $TARGET | tr -s " " | cut -d " " -f 5`
    sum=$(($start-$end))
    percent=$(($sum*100/$start))
    echo $TARGET "Saved:" $sum "Bytes ("$percent "%)"
    echo $TARGET "Saved:" $sum "Bytes ("$percent "%)" >> $PICGO

  fi
  #echo $TARGET "Saved:" $sum "Bytes ("$percent "%)" >> $LOGFILE
  #echo "Backup: /tmp/"$DATE".tar.gz" >> $LOGFILE
}

function crunshPNG() {
  local var localName="$1"
  # EXTLESS=`echo $1 | sed -e 's/\.png$//'`
  # get file name
  EXTLESS=`echo ${localName##*/} | sed -e 's/\.png$//'`

  midFile="$TINYPNG_WORK_DIR/.tmp/$EXTLESS"

  convert $1 -background Black -alpha Background $1
  pngnq -f -n 256 -e '-pngnq.png' -d $TINYPNG_WORK_DIR/.tmp $1
  # pngcrush -rem gAMA -rem cHRM -rem iCCP -rem sRGB -brute -l 9 -max -reduce -m 0 -q .tinypngtmp/$EXTLESS-pngnq.png .tinypngtmp/$EXTLESS-pngcrush.png
  pngcrush -rem gAMA -rem cHRM -rem iCCP -rem sRGB -brute -l 9 -reduce -q "$midFile"-pngnq.png "$midFile"-pngcrush.png
  optipng -o7 -q -out "$midFile"-optipng.png "$midFile"-pngcrush.png
  if $DEBUG ;then
    echo "tinypng: pngcrush and optipng done"
  fi
  pngout -q -y -k0 -s0 "$midFile"-optipng.png "$midFile"-pngout.png
  if $DEBUG ;then
    echo "tinypng: pngout done"
  fi
  advpng -z -4 "$midFile"-pngout.png > /dev/null
  mv "$midFile"-pngout.png $1
}

function cleanup() {
  rm -rf $TINYPNG_WORK_DIR/.tmp
}

# Is target a file or a directory
function conditions() {
  mkdir -p $TINYPNG_WORK_DIR/.tmp
  if [ -d "$TARGET" ]
  then
    copy
    count
    crushdir
    backup
    cleanup
  fi
  if [ -f "$TARGET" ]
  then
    #copy
    crushfile
    #backup
    cleanup
  fi
}

if [ -w "$TARGET" ]
then
  conditions
else
  echo -e $COL_RED"No write rights or wrong target!"$COL_RESET
fi

exit 0
